#!/usr/bin/env bash
# –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ NixOS –∏ Hyprland

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[OK]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

echo -e "${GREEN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
echo -e "${GREEN}‚ïë              –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ NixOS + Hyprland                    ‚ïë${NC}"
echo -e "${GREEN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
echo

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ NixOS –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
check_nixos_version() {
    log_info "=== –ü–†–û–í–ï–†–ö–ê –í–ï–†–°–ò–ò NIXOS ==="
    
    if command -v nixos-version &> /dev/null; then
        local version=$(nixos-version)
        log_success "–í–µ—Ä—Å–∏—è NixOS: $version"
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –≤–µ—Ä—Å–∏–∏
        if [[ $version =~ ([0-9]+\.[0-9]+) ]]; then
            local version_num="${BASH_REMATCH[1]}"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –±–µ–∑ bc
            local major=$(echo $version_num | cut -d. -f1)
            local minor=$(echo $version_num | cut -d. -f2)
            
            if [[ $major -gt 24 ]] || [[ $major -eq 24 && $minor -ge 5 ]]; then
                log_success "–í–µ—Ä—Å–∏—è $version_num —Å–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"
            else
                log_warning "–í–µ—Ä—Å–∏—è $version_num –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
            fi
        fi
    else
        log_error "nixos-version –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
    
    return 0
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
check_config_files() {
    log_info "=== –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ==="
    
    local files=(
        "/etc/nixos/configuration.nix:–û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è NixOS"
        "/etc/nixos/hardware-configuration.nix:–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"
        "$HOME/.config/hypr/hyprland.conf:–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Hyprland"
        "$HOME/.config/waybar/config:–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Waybar"
        "$HOME/.config/waybar/style.css:–°—Ç–∏–ª–∏ Waybar"
    )
    
    for file_info in "${files[@]}"; do
        local file_path=$(echo "$file_info" | cut -d: -f1)
        local description=$(echo "$file_info" | cut -d: -f2)
        
        if [[ -f "$file_path" ]]; then
            log_success "$description: $file_path"
        else
            log_warning "$description –Ω–µ –Ω–∞–π–¥–µ–Ω: $file_path"
        fi
    done
    
    return 0
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–µ–¥—ã –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏
check_virtualization() {
    log_info "=== –ü–†–û–í–ï–†–ö–ê –°–†–ï–î–´ –í–ò–†–¢–£–ê–õ–ò–ó–ê–¶–ò–ò ==="
    
    if command -v systemd-detect-virt &> /dev/null; then
        local virt_type=$(systemd-detect-virt 2>/dev/null || echo "none")
        
        case "$virt_type" in
            "oracle")
                log_success "VirtualBox –æ–±–Ω–∞—Ä—É–∂–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ hyprland-virtualbox.conf"
                ;;
            "none")
                log_success "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –∂–µ–ª–µ–∑–æ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ hyprland.conf"
                ;;
            *)
                log_info "–í–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è: $virt_type"
                ;;
        esac
    else
        log_warning "systemd-detect-virt –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    return 0
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
check_services() {
    log_info "=== –ü–†–û–í–ï–†–ö–ê –°–ï–†–í–ò–°–û–í ==="
    
    local services=(
        "pipewire:–ê—É–¥–∏–æ —Å–µ—Ä–≤–µ—Ä"
        "NetworkManager:–°–µ—Ç–µ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
        "hyprland:–û–∫–æ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä"
    )
    
    for service_info in "${services[@]}"; do
        local service=$(echo "$service_info" | cut -d: -f1)
        local description=$(echo "$service_info" | cut -d: -f2)
        
        if systemctl is-active --quiet "$service" 2>/dev/null; then
            log_success "$description ($service) –∞–∫—Ç–∏–≤–µ–Ω"
        elif systemctl --user is-active --quiet "$service" 2>/dev/null; then
            log_success "$description ($service) –∞–∫—Ç–∏–≤–µ–Ω (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)"
        else
            log_warning "$description ($service) –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
        fi
    done
    
    return 0
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–∫–µ—Ç–æ–≤
check_packages() {
    log_info "=== –ü–†–û–í–ï–†–ö–ê –£–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–• –ü–ê–ö–ï–¢–û–í ==="
    
    local packages=(
        "hyprland:–û–∫–æ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä"
        "waybar:–ü–∞–Ω–µ–ª—å"
        "kitty:–¢–µ—Ä–º–∏–Ω–∞–ª"
        "rofi:–õ–∞—É–Ω—á–µ—Ä"
        "firefox:–ë—Ä–∞—É–∑–µ—Ä"
        "thunar:–§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä"
    )
    
    for package_info in "${packages[@]}"; do
        local package=$(echo "$package_info" | cut -d: -f1)
        local description=$(echo "$package_info" | cut -d: -f2)
        
        if command -v "$package" &> /dev/null; then
            log_success "$description ($package) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        else
            log_warning "$description ($package) –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
    done
    
    return 0
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
check_users() {
    log_info "=== –ü–†–û–í–ï–†–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ==="
    
    if id "lav" &>/dev/null; then
        log_success "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 'lav' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø
        local groups=$(groups lav 2>/dev/null)
        if echo "$groups" | grep -q "wheel"; then
            log_success "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 'lav' –≤ –≥—Ä—É–ø–ø–µ wheel (sudo –¥–æ—Å—Ç—É–ø)"
        else
            log_warning "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 'lav' –Ω–µ –≤ –≥—Ä—É–ø–ø–µ wheel"
        fi
        
        if echo "$groups" | grep -q "networkmanager"; then
            log_success "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 'lav' –≤ –≥—Ä—É–ø–ø–µ networkmanager"
        else
            log_warning "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 'lav' –Ω–µ –≤ –≥—Ä—É–ø–ø–µ networkmanager"
        fi
    else
        log_error "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 'lav' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
    
    return 0
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
check_config_syntax() {
    log_info "=== –ü–†–û–í–ï–†–ö–ê –°–ò–ù–¢–ê–ö–°–ò–°–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ==="
    
    if [[ -f "/etc/nixos/configuration.nix" ]]; then
        if nixos-rebuild dry-build &>/dev/null; then
            log_success "–°–∏–Ω—Ç–∞–∫—Å–∏—Å configuration.nix –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π"
        else
            log_error "–û—à–∏–±–∫–∏ –≤ configuration.nix"
            log_info "–ó–∞–ø—É—Å—Ç–∏—Ç–µ 'sudo nixos-rebuild dry-build' –¥–ª—è –¥–µ—Ç–∞–ª–µ–π"
        fi
    else
        log_warning "configuration.nix –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    return 0
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
generate_report() {
    log_info "=== –û–¢–ß–ï–¢ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ==="
    
    echo -e "${YELLOW}üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
    if [[ ! -f "$HOME/.config/hypr/hyprland.conf" ]]; then
        echo "‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: sudo ./install-configs.sh"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if ! id "lav" &>/dev/null; then
        echo "‚Ä¢ –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: sudo nixos-rebuild switch"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ VirtualBox
    local virt_type=$(systemd-detect-virt 2>/dev/null || echo "none")
    if [[ "$virt_type" == "oracle" ]]; then
        echo "‚Ä¢ VirtualBox: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ hyprland-virtualbox.conf –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
    fi
    
    echo
    echo -e "${BLUE}üîß –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:${NC}"
    echo "‚Ä¢ journalctl -xe                    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏"
    echo "‚Ä¢ systemctl --user status hyprland  # –°—Ç–∞—Ç—É—Å Hyprland"
    echo "‚Ä¢ pactl info                        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—É–¥–∏–æ"
    echo "‚Ä¢ lspci | grep VGA                  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–µ"
    echo "‚Ä¢ free -h                           # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏"
    echo "‚Ä¢ df -h                             # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞"
    
    return 0
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    local start_time=$(date +%s)
    
    check_nixos_version
    echo
    check_config_files
    echo
    check_virtualization
    echo
    check_services
    echo
    check_packages
    echo
    check_users
    echo
    check_config_syntax
    echo
    generate_report
    
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))
    
    echo
    echo -e "${GREEN}‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${duration} —Å–µ–∫—É–Ω–¥${NC}"
}

# –ó–∞–ø—É—Å–∫
main "$@"
